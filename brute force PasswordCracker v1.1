import itertools
import string
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

# Define the character set: letters, digits, symbols, and German umlauts
charset = (
    string.ascii_letters + string.digits +
    string.punctuation + "äöüÄÖÜ"
)

password = input("Enter your password: ")
password_length = len(password)
attempts = 0
found_event = threading.Event()
result = {"found": False, "attempt": "", "attempts": 0}
lock = threading.Lock()

def try_password(attempt_tuple):
    global attempts
    attempt = ''.join(attempt_tuple)
    with lock:
        attempts += 1
        if attempts % 300 == 0:
            print(f"Trying: {attempt}")
    if attempt == password:
        with lock:
            result["found"] = True
            result["attempt"] = attempt
            result["attempts"] = attempts
        found_event.set()
        return True
    if found_event.is_set():
        return False
    return False

start_time = time.time()

with ThreadPoolExecutor(max_workers=8) as executor:
    combinations = itertools.product(charset, repeat=password_length)
    futures = []
    for attempt_tuple in combinations:
        if found_event.is_set():
            break
        futures.append(executor.submit(try_password, attempt_tuple))
    for future in as_completed(futures):
        if future.result():
            break

end_time = time.time()

if result["found"]:
    print("\nPassword cracked!")
    print(f"The password is: {result['attempt']}")
    print(f"Attempts: {result['attempts']}")
    print(f"Time taken: {end_time - start_time:.2f} seconds")
else:
    print("Password could not be cracked.")
